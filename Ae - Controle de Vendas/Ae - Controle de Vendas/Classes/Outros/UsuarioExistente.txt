public void Gravar()
{
    try
    {
        using (TransactionScope transacao = new TransactionScope())
        {
            // Verificar se o CPF já existe
            if (CPFJaExiste(CPF))
            {
                throw new Exception("CPF já cadastrado.");
            }

            // Verificar se o e-mail já existe
            if (EmailJaExiste(Email))
            {
                throw new Exception("E-mail já cadastrado.");
            }

            List<SqlParameter> parameters = new List<SqlParameter>();

            if (Id == 0)
            {
                // Inserção de novo cliente
                string sql = "INSERT INTO tblCliente (Nome, CPF, Telefone, Email, SexoId, EnderecoId, FuncionarioId) " +
                             "VALUES (@nome, @CPF, @Telefone, @email, @sexoId, @enderecoId, @usuarioId);";

                parameters.Add(new SqlParameter("@nome", Nome));
                parameters.Add(new SqlParameter("@CPF", CPF));
                parameters.Add(new SqlParameter("@Telefone", Telefone));
                parameters.Add(new SqlParameter("@email", Email));
                parameters.Add(new SqlParameter("@sexoId", SexoId));
                parameters.Add(new SqlParameter("@enderecoId", EnderecoId));
                parameters.Add(new SqlParameter("@usuarioId", Global.IdUsuarioLogado));

                Id = acesso.Executar(parameters, sql);
            }
            else
            {
                // Atualização de cliente existente
                string sql = "UPDATE tblCliente SET " +
                             "Nome = @nome, CPF = @CPF, Telefone = @Telefone, " +
                             "Email = @email, SexoId = @sexoId, " +
                             "EnderecoId = @enderecoId, FuncionarioId = @usuarioId " +
                             "WHERE Id = @id;";

                parameters.Add(new SqlParameter("@nome", Nome));
                parameters.Add(new SqlParameter("@CPF", CPF));
                parameters.Add(new SqlParameter("@Telefone", Telefone));
                parameters.Add(new SqlParameter("@email", Email));
                parameters.Add(new SqlParameter("@sexoId", SexoId));
                parameters.Add(new SqlParameter("@enderecoId", EnderecoId));
                parameters.Add(new SqlParameter("@usuarioId", Global.IdUsuarioLogado));
                parameters.Add(new SqlParameter("@id", Id));

                acesso.Executar(sql, parameters);
            }

            transacao.Complete();
        }
    }
    catch (Exception ex)
    {
        throw new Exception("Erro ao gravar cliente: " + ex.Message);
    }
}

private bool CPFJaExiste(string cpf)
{
    try
    {
        string sql = "SELECT COUNT(*) FROM tblCliente WHERE CPF = @cpf";
        List<SqlParameter> parameters = new List<SqlParameter>();
        parameters.Add(new SqlParameter("@cpf", cpf));

        int count = acesso.ExecutarConsultaScalar<int>(sql, parameters);

        return count > 0;
    }
    catch (Exception ex)
    {
        throw new Exception("Erro ao verificar CPF existente: " + ex.Message);
    }
}

private bool EmailJaExiste(string email)
{
    try
    {
        string sql = "SELECT COUNT(*) FROM tblCliente WHERE Email = @email";
        List<SqlParameter> parameters = new List<SqlParameter>();
        parameters.Add(new SqlParameter("@email", email));

        int count = acesso.ExecutarConsultaScalar<int>(sql, parameters);

        return count > 0;
    }
    catch (Exception ex)
    {
        throw new Exception("Erro ao verificar e-mail existente: " + ex.Message);
    }
}




